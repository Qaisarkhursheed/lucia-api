<?php

namespace App\Repositories\TextractReader\DocumentReaders\Hotels;

use App\ModelsExtended\HotelRoom;
use App\ModelsExtended\ItineraryHotel;
use App\Repositories\TextractReader\DocumentReaders\DocumentReaderAbstract;
use App\Repositories\TextractReader\DocumentTypeDetector;
use Carbon\Carbon;
use Illuminate\Support\Str;

class Hotel0002Reader extends Hotel0001Reader
{
    protected function setInnerDateUTC()
    {
        return DocumentReaderAbstract::setInnerDateUTC(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function canRead(array $jsonArray): bool
    {
//--- DETECTING -- 100 % match
//has line starting with ["THE KENSINGTON"]
//has line starting with ["Reservation No:"]
//Room Type:

        return DocumentTypeDetector::passesThresholdOnLines( $jsonArray, [
            "THE KENSINGTON", "Reservation No:", "Room Type:"
        ],80);
    }

    protected function getRawSegments(): array
    {
        return [$this->lines];
    }

    /**
     * @param array $segment
     * @return ItineraryHotel
     */
    protected function processRawSegment(array $segment):ItineraryHotel
    {
        $booking = $this->createItineraryHotel( $segment[0] );

        $booking->confirmation_reference =  self::getKeyValueStartingWith("Reservation No" );

        $check_in_date = self::getKeyValueStartingWith("Arrival Date") ;
        $check_in_dateX = explode("for", $check_in_date);

        $booking->check_in_date =  Carbon::createFromFormat( self::DATE_FORMAT__DDD_DDT__MMMM__YYYY, trim($check_in_dateX[0]) );
        if( count($check_in_dateX ) > 1  )
        {
            $v = (string)Str::of($check_in_dateX[1])->trim()->substr(0,1);

            if( is_numeric($v) )
                $booking->check_out_date = $booking->check_in_date->clone()->addDays(intval($v));
        }

        $booking->check_out_date = $booking->check_out_date?? $booking->check_in_date;

        $booking->check_in_time = null;
        $booking->check_out_time = null;

        $booking->notes = collect( self::extractBetweenLinesExclusiveUsingStartingWith( $segment,
        "Cancellation Procedures", "Yours sincerely" ) )->implode("\n");

        $booking->hotel_rooms->push($this->createHotelRoom($segment));

        return $booking;
    }

    protected function createHotelRoom(array $segment)
    {
        $room = new HotelRoom();

        $room->bedding_type = self::getKeyValueStartingWith("Room Type");

        $room->room_type = $room->bedding_type;

        $room->guest_name = self::getKeyValueStartingWith("Guest Name");

        $room->number_of_guests = 1;

        $value = self::getKeyValueStartingWith("Nightly Rate");
        $room->currency_id = $this->detectCurrencyTypeID( $value );

        $room->room_rate = floatval(  (string)Str::of(explode(",", trim($value))[0])->substr(1) );

        return $room;
    }
}
