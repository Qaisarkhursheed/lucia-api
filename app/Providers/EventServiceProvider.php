<?php

namespace App\Providers;

use App\ModelsExtended\Itinerary;
use App\ModelsExtended\ItineraryConcierge;
use App\ModelsExtended\ItineraryCruise;
use App\ModelsExtended\ItineraryFlight;
use App\ModelsExtended\ItineraryFlightSegment;
use App\ModelsExtended\ItineraryHotel;
use App\ModelsExtended\ItineraryInsurance;
use App\ModelsExtended\ItineraryOther;
use App\ModelsExtended\ItineraryTour;
use App\ModelsExtended\ItineraryTransport;
use App\ModelsExtended\User;
use App\Notifications\Auth\AccountStatusNotification;
use App\Observers\GoogleCalendarModelObserver;
use App\Observers\ItineraryCruiseModelObserver;
use App\Observers\ItineraryFlightSegmentModelObserver;
use App\Observers\UserModelObserver;
use Laravel\Lumen\Providers\EventServiceProvider as ServiceProvider;

class EventServiceProvider extends ServiceProvider
{
    /**
     * The event listener mappings for the application.
     *
     * @var array
     */
    protected $listen = [
        \App\Events\UserStatusChangedEvent::class => [
            AccountStatusNotification::class
        ],
    ];

    public function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        User::observe(new UserModelObserver());
        ItineraryCruise::observe(new ItineraryCruiseModelObserver());

        Itinerary::observe(new GoogleCalendarModelObserver());

        ItineraryCruise::observe(new GoogleCalendarModelObserver());
        ItineraryHotel::observe(new GoogleCalendarModelObserver());

        ItineraryFlight::observe(new GoogleCalendarModelObserver());
        ItineraryFlightSegment::observe(new ItineraryFlightSegmentModelObserver());
        ItineraryFlightSegment::observe(new GoogleCalendarModelObserver());

        ItineraryTour::observe(new GoogleCalendarModelObserver());
        ItineraryTransport::observe(new GoogleCalendarModelObserver());
        ItineraryInsurance::observe(new GoogleCalendarModelObserver());
        ItineraryConcierge::observe(new GoogleCalendarModelObserver());
        ItineraryOther::observe(new GoogleCalendarModelObserver());

    }

}
